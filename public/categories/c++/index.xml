<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Natrium Theme</title>
    <link>https://stdint.github.io/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Natrium Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Jul 2017 05:40:26 +0000</lastBuildDate>
    
	<atom:link href="https://stdint.github.io/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;变量初始化方法</title>
      <link>https://stdint.github.io/c--%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 18 Jul 2017 05:40:26 +0000</pubDate>
      
      <guid>https://stdint.github.io/c--%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95/</guid>
      <description>现在的C++有三种初始化变量的方法，他们分别是 - 赋值语句，也就是等号 - 小括号，其实是调用构造函数 - 花括号（C++11以后）
等号赋值是传统的C语言赋值，当变量数据类型涵盖范围较小时，有可能会丢失高位信息，造成错误。 {% highlight c++ %} int i1 = 7.8 // i1 becomes 7(surprise?) {% endhighlight %}
小括号等于是调用了构造函数，没有什么特别好讲的。
C++11推出了initializer list，即花括号语法。这种方法会在编译时报错（报警告）提示丢失信息的风险。 在这个语法下，等号不是必须的。 {% highlight c++ %} int i2{7.8} // error: float-&amp;gt;int int i3 = {7.8} // error: float-&amp;gt;int, 等号不是必须的 {% endhighlight %}
总的来说，等号赋值提供了C的兼容性，但是不安全。花括号赋值是比较被推荐的做法。
 例子来自《A Tour Of C++》  </description>
    </item>
    
  </channel>
</rss>