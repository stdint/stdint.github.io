<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Natrium Theme</title>
    <link>https://stdint.github.io/</link>
    <description>Recent content on Natrium Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Feb 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://stdint.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>2018-02-11 周记</title>
      <link>https://stdint.github.io/2018-02-11-%E5%91%A8%E8%AE%B0/</link>
      <pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://stdint.github.io/2018-02-11-%E5%91%A8%E8%AE%B0/</guid>
      <description>有点懂梵高为什么这么牛了。
题图是梵高的《阿尔的吊桥》，是他“晚年”在法国阿尔独居时所绘。我之前不知道这样一幅画的存在，这周看到，心里升起了一种巨大的感动。湖水清澈，蓝天无云，感觉没有风，画面很安静且美好。被工作折磨了一周的我，瞬间被治愈了。我接着Google了一下梵高的知名作品，比如耳熟能详的《星夜》。看着这些名画，我竟然产生了不一样的感受：他的作品有着治愈心灵的力量。
最近让我感动的，除了梵高，还有小南泰叶。偶然间在虾米上听到她的歌，听得我浑身鸡皮疙瘩，甚是感动。于是整个周末都在循环她的歌单，上次让我如此感动的，好像是椎名林檎。这周听下来，我最喜欢的是《No Man》，从曲风到歌词到小南泰叶的嘶哑唱腔，都配合得如此完美。感动得，想哭。
艺术如此强大，因为他们指向了我们内心最柔软的地方。我们的心灵被尘世所累，覆盖上了一层灰。艺术的共鸣，轻易地掸掉了这些灰尘。所以艺术大师的作品流芳，成为无价之宝，真的不过分。
每一个画家、音乐家都有他们独特的风格，有人爱，也有人讨厌。艺术家们不是为了讨好某个人而创作了他们的艺术，他们只是看到了听到了感受到了生活的某一个点，然后以他们自己的方式还原或者加工，而我们只是恰好从他们的艺术中得到了共鸣。艺术家又坚持以自己的方式来表达，不向主流妥协（即使流行，也会有自己独到的点）。正是多样性的艺术，让我们的生活五彩斑斓。
生活需要多一点文艺。</description>
    </item>
    
    
    
    
    
    
    
    <item>
      <title>2018-02-04 周记</title>
      <link>https://stdint.github.io/2018-02-04-%E5%91%A8%E8%AE%B0/</link>
      <pubDate>Sun, 04 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://stdint.github.io/2018-02-04-%E5%91%A8%E8%AE%B0/</guid>
      <description>这两周入门了美国房贷，基本上分为两种，30年固定利率和ARM（可变利率房贷）。ARM也分成5/1，7/1和10/1的不同类型。
30年固定利率贷款的好处是利率固定，不会受到市场波动影响。缺点是，这种贷款的利率相比于ARM来说是比较差的。ARM可以提供更加优惠的利率，这个优惠的利率会锁定一个相对短的年限，此后以一年为周期进行调整。所谓调整也不是完全没有控制的，一般会限制一个调整幅度上限，比如2%。此外，ARM还有最终利率的上限限制。ARM分为5/1，7/1和10/1，指的是5年，7年和10年的固定利率，此外每一年调整一次。5年ARM的利率最好，但是也很难获得，需要比较高的条件。
以前一直认为高信用分数是获得贷款的唯一条件，其实不然。高信用分数是贷款的必要不充分条件，underwriter（审批贷款的人）会看收入债务比，现金流等等。只有收入债务比低于35%或某个数字，然后现金可以支撑失业后房贷+房产税N个月的支出，才会认为可以放贷。经济危机之后，审批变得比较严格，需要很多很多的证明。</description>
    </item>
    
    
    
    <item>
      <title>2018-01-20 周记</title>
      <link>https://stdint.github.io/2018-01-20-%E5%91%A8%E8%AE%B0/</link>
      <pubDate>Sat, 20 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://stdint.github.io/2018-01-20-%E5%91%A8%E8%AE%B0/</guid>
      <description>今天想说说独立思考，这是一个优秀的人必备的品格。
人是社会动物，从出生开始就生活在某个群体中：家庭，学校，公司以及社会。在这些群体中我们都很容易被他人影响自己的思维，有时候做的决定并不是自己思考的结果。因为懒，我们会盲从领导，大V，媒体。久而久之，甚至会失去思考的能力。《从0到1》里说工程师往往会认为“只要产品自身品质足够好，不需要营销就能大卖”，而这是错误的，好产品也需要好营销策略才能成功，好酒也怕巷子深。我不禁冒冷汗：我也曾经是营销无用论的忠实拥趸！
思维决定了行为方式。《富爸爸穷爸爸》的作者提到，风险是一个相对的概念，和思维角度很有关系。“穷爸爸”认为有稳定的工作是正经事：稳定的工作带来稳定的收入和生活，何乐不为。“富爸爸”却认为稳定工作是很有风险的事情：世界是变化的，现在稳定的职位、技能以及公司可能在未来会被淘汰，而现在从事稳定的工作可能会固化思维、停止学习，带来未来失业风险。这种本质上的思维差异，导致了富爸爸穷爸爸们在关键问题上做出不一样的决策：买大房子vs买小房子，工作vs创业，储蓄vs投资。于是，锻炼自己的思维，打造成功者思考问题的方式便成了最重要的课题：这种思考方式会指向成功。
什么是成功者的思考方式？我认为是独立思考。独立思考的结果往往是叛逆的，就像青春期的孩子会发现父母的思维不再符合自己的认知。叛逆的、和常识不符的思考会带来新知识，带来成长。Peter Thiel说创业成功是从0到1的过程，而不是从1到N。从0到1是需要从一个大众不知的秘密角度出发，获取一个细分市场的垄断，然后发展到影响人们的生活。我们需要大量长时间的独立思考，才能领悟到当今世界的秘密。另外一本书《首先，打破一切常规》也提到了很多和常识格格不入却很有道理的理论，值得一读。
我感觉自己独立思考的能力并不出众。这篇周记充满了读过的书籍的思维，而这本身就不是独立思考。尽管如此，我还是深受启发，决心以后更加独立地思考问题。</description>
    </item>
    
    
    
    <item>
      <title>2018-01-13 周记</title>
      <link>https://stdint.github.io/2018-01-13-%E5%91%A8%E8%AE%B0/</link>
      <pubDate>Sat, 13 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://stdint.github.io/2018-01-13-%E5%91%A8%E8%AE%B0/</guid>
      <description>和老婆聊天，谈起写作的重要性。写作是很好的总结经验教训，指导未来生活的方式。我决定2018年开始写周记，希望不是一个flag。
和写作一起被再次拾起的是锅铲。来了湾区就真的没有正儿八经的做过菜，公司提供了很多食物，另外周边的中餐馆选择也多，于是就懒了。前一周忐忑地做了个经典家常菜番茄炒鸡蛋，口感还不错，信心大增。这周末尝试做咖喱鸡块，然而不幸滑铁卢。土豆被烧化了，鸡肉也缩了，导致做出了咖喱汤。仔细想想，我好像从来都没有很成功的做过咖喱。
2018年我又开始做健身操了。结婚之前为了保证良好的身材做了几个月的健身操，然后因为忙结婚忙工作，就给放下了一阵子。当时做了几个月，我觉得还是很有效果，脖子不酸痛了，肌肉块也开始出现。健身这件事情还是要持之以恒，坚持就会有效果，就像背英语单词一样。健身操有两种，一种是教练真人带着做的，一种是跟着视频做的。今天是2018年第一次去上教练教的，教练居然还记得我，问我怎么有一阵子没有来了。隔了好几个月还能记着一个不熟的人，我觉得也是一个很牛的技能。
总得来说，2018年初开了几个头：写作，做菜，健身。我不想给自己定什么目标，只是觉得这些事挺好的，能养成习惯的话对自己有益。做一次不难，难的是坚持。希望我可以坚持，以后再看到这篇周记的时候不会觉得羞愧。</description>
    </item>
    
    
    
    <item>
      <title>如何写Rakefile</title>
      <link>https://stdint.github.io/%E5%A6%82%E4%BD%95%E5%86%99rakefile/</link>
      <pubDate>Sat, 05 Aug 2017 21:00:15 -0700</pubDate>
      
      <guid>https://stdint.github.io/%E5%A6%82%E4%BD%95%E5%86%99rakefile/</guid>
      <description>Rakefile完全使用Ruby语法，没有额外的特殊语法。
Rake执行的path 在某个项目中的任何一个目录下下执行rake，如果当前目录下没有Rakefile，那么rake会自动向着根目录的方向去寻找Rakefile。 这样的好处是在任何文件夹下定义的一些rake模块都是以Rakefile所在的目录的路径执行的。
Make就没有这么省事了。
任务 任务规则  定义一个任务： {% highlight ruby %} task :name #标记类型作为任务名 task &amp;lsquo;name&amp;rsquo; #字符串作为任务名 task :name do |t| &amp;hellip; end task :name =&amp;gt; :prerequisite #任务的依赖规则 task :name =&amp;gt; [:pre1, :pre2] #多个依赖 {% endhighlight %} 默认任务： 可以选择某个任务作为默认任务 {% highlight ruby %} task :default =&amp;gt; :one task :one =&amp;gt; :two do &amp;hellip; end task :two do &amp;hellip; end {% endhighlight %} 文件任务 文件任务用于生成一些新的文件，需要使用file方法。 {% highlight ruby %} file &amp;ldquo;filename&amp;rdquo; =&amp;gt; [&amp;ldquo;a.</description>
    </item>
    
    
    
    <item>
      <title>鸡汤文读后感</title>
      <link>https://stdint.github.io/%E9%B8%A1%E6%B1%A4%E6%96%87%E8%AF%BB%E5%90%8E%E6%84%9F/</link>
      <pubDate>Thu, 27 Jul 2017 23:22:18 -0700</pubDate>
      
      <guid>https://stdint.github.io/%E9%B8%A1%E6%B1%A4%E6%96%87%E8%AF%BB%E5%90%8E%E6%84%9F/</guid>
      <description>今天刷朋友圈看到一篇文章，标题是《如果35岁时破产，还有多大可能逆袭？》。文章提出了一个简单的游戏模型来模拟经济活动：假设每个人起点相同，都有100元，每个人每一天随机从另外一个人那里赚走1元钱。文章作者进行这样的操作很多轮，来模拟经过很多年之后的每个人的财富分布。
文章主要得出了这些结论： - 最终大部分的钱跑进了少部分人的口袋里。 - 允许借贷的条件下，35岁时破产的人很难逆袭，发财要趁早。 - 富二代维持财富的概率极高 - 增税会减缓但并不会消除贫富差距 - 努力的人还是会混得不错
这个鸡汤满满的文章写得很是不错，不仅有科学分析、实验论证，而且提出了社会经济问题，让网友们看得忿忿不平，感叹自己运气不好。文章最后还给出了鸡汤的精华，只要每天比别人多努力一点点，就离成功不远啦！
然而，这个其实不就是数理统计里面最基础的_正态分布_吗？？文章全程似乎并没有提到正态分布，然而这样的随机试验，最终的结果必然是正态分布。现在人们都太依赖利用电脑程序来帮助计算了，似乎有点失去了纸笔推公式的意思了？在AI的时代，人们可不要退化掉思考的能力。
数学理论这样包装一下，倒是让人看得有兴趣又记忆深刻。</description>
    </item>
    
    
    
    <item>
      <title>C&#43;&#43;变量初始化方法</title>
      <link>https://stdint.github.io/c--%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 18 Jul 2017 05:40:26 +0000</pubDate>
      
      <guid>https://stdint.github.io/c--%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95/</guid>
      <description>现在的C++有三种初始化变量的方法，他们分别是 - 赋值语句，也就是等号 - 小括号，其实是调用构造函数 - 花括号（C++11以后）
等号赋值是传统的C语言赋值，当变量数据类型涵盖范围较小时，有可能会丢失高位信息，造成错误。 {% highlight c++ %} int i1 = 7.8 // i1 becomes 7(surprise?) {% endhighlight %}
小括号等于是调用了构造函数，没有什么特别好讲的。
C++11推出了initializer list，即花括号语法。这种方法会在编译时报错（报警告）提示丢失信息的风险。 在这个语法下，等号不是必须的。 {% highlight c++ %} int i2{7.8} // error: float-&amp;gt;int int i3 = {7.8} // error: float-&amp;gt;int, 等号不是必须的 {% endhighlight %}
总的来说，等号赋值提供了C的兼容性，但是不安全。花括号赋值是比较被推荐的做法。
 例子来自《A Tour Of C++》  </description>
    </item>
    
    
    
    <item>
      <title>Ruby初体验</title>
      <link>https://stdint.github.io/ruby%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Thu, 22 Jun 2017 21:10:32 -0700</pubDate>
      
      <guid>https://stdint.github.io/ruby%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      <description>今天初步体验了一下Ruby语言，获得了一点初级的认识。
 动态类型语言 解释器语言 格式要求比Python宽松 纯面向对象的语言，所有的元素都是对象 类似C的语法结构  语法糖： - 减少了很多花括号的使用 - 首字母大写代表常量，小写代表变量 - 自带两种打印方法puts和print，puts自带回车 - 简单的array unpacking，例子： {% highlight ruby %} first, second, third = ARGV {% endhighlight %}</description>
    </item>
    
    
  </channel>
</rss>
