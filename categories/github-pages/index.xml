<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github Pages on Massively</title>
    <link>https://stdint.github.io/categories/github-pages/</link>
    <description>Recent content in Github Pages on Massively</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 May 2017 23:29:33 -0700</lastBuildDate>
    
	<atom:link href="https://stdint.github.io/categories/github-pages/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Github Pages使用第三方主题</title>
      <link>https://stdint.github.io/post/2017-05-30-github-pages-use-third-party-theme/</link>
      <pubDate>Tue, 30 May 2017 23:29:33 -0700</pubDate>
      
      <guid>https://stdint.github.io/post/2017-05-30-github-pages-use-third-party-theme/</guid>
      <description>第N次开博客。使用的是Github官方支持的jekyll和免费的静态域名，加上git以及markdown的加持，感觉这次说不定能写下去!（好大的一个flag&amp;hellip;&amp;hellip;)
不过多介绍Github Pages了，官网的教程很简洁明了。官方也提供了使用Jekyll搭建一个简单的静态网站的教程，也是十分简单易懂。然而，官方只支持13种Jekyll主题，而且也都不是很好看。
我决定Google一下，找找看怎么使用第三方主题的方法。
我找了一个MIT license的叫whiteglass的主题，只需要在Gemfile里面加上这一句就OK啦。
gem &amp;quot;jekyll-whiteglass&amp;quot;, &amp;quot;1.3.0&amp;quot;  要在Github Page上应用这个主题，我是这么干的： - 首先需要两个branch：master和develop。 - master上不要commit config.yml，用来防止Github自动帮我编译网站。 - 在develop上编译，然后把site文件夹里面的所有文件拷贝到顶层文件夹里面，在master上commit。 - 这样就搞定了&amp;hellip;&amp;hellip;
然而这么做太烦了，手动操作太多。于是我写了个Rakefile来自动化编译过程，然后利用travis ci来自动化上面写的第三步。每次写博客，我只需要在develop上commit然后push，就搞定啦！
还不错哦。</description>
    </item>
    
  </channel>
</rss>